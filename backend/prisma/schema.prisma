// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  fullName   String
  email      String  @unique
  password   String?  
  provider   String  // google , github, local
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  mockInterview MockInterview[]
  session        Session?
}

model Job {
  id           String  @id @default(uuid())
  title        String
  description  String
  skills       String[]
  ctc          Int
  location     String
  active       Boolean
  expiry       DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
}

model MockInterview{
  id             String  @id @default(uuid())
  role           String
  round          String   // like behavioral, technial, hr
  difficulty     String 
  duration       Int
  skills         String[]
  resume         String?
  user           User  @relation(fields: [userId], references: [id])
  userId         String   

  session        Session?
}

model Session {
  id              String @id @default(uuid())
  mockInterviewId String @unique
  mockInterview   MockInterview @relation(fields: [mockInterviewId], references: [id])

  user           User  @relation(fields: [userId], references: [id])
  userId         String  @unique

  status          SessionStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  cancelledAt     DateTime?
  cancelReason    String?

  cameraTestPassed Boolean @default(false) // true/false / null
  micTestPassed    Boolean @default(false) // true/false / null

  result           Result?
}

enum SessionStatus{
  PENDING              // NOT CHECKED
  MIC_CHECK            // CHECKING MIC
  CAMERA_CHECK         // CHECKING CAMERA
  READY
  IN_PROGRESS          // INTERVIEW STARTED
  COMPLETED            // COMPLETED INTERVIEW
  FAILED               // FAILED
  CANCELLED 
}

model Result{
  id                String @id @default(uuid())
  transcript        String
 
  scores     Json?    // e.g. { "confidence": 0.85, "clarity": 0.9 }
  expressions Json?   // e.g. { "smile": 0.7, "neutral": 0.2 }
  feedback   String?  // AI-generated feedback
  screenshots Json?   // array of S3 URLs if stored
  createdAt  DateTime @default(now())   
  
  sessionId   String    @unique
  session     Session @relation(fields: [sessionId], references: [id])   
}